dto 재활용 안하는 이유
1. 유지보수
2. 보안문제

dto를 request, reponse로 나누어서 사용


엔드포인트는 일단 만들고 나중에 문서화 단계에서 수정할거임

배포 후에는 엔드포인트 수정 어려움

REST API: 통신 방법
RESTful API: REST API를 잘 설계했다

rest, rest api, restful api 찾아볼 것

마이바티스 기업에서도 많이 씀

jpa 배울거 많다...

마이바티스는 쿼리 하나 틀려도 어디가 틀렸는지 잘 모름, 대신 쉬움

Domain Driven Design 공부하기

Domain은 우리가 구현해야하는 목표, db에 저장되는 객체라고 생각해도 되지만 1대1 매칭되지는 않음

데브옵스: 운영과 개발 사이에서 조율 dev ops, 자매품 ml ops

ai쪽 취업은 대학원 필수는 아니고 아이디어가 중요하다

postman: json 통신 테스트위해서,,

docker: 배포할 때 별별거 다 까는거 이거만 깔면 알아서 다해줌

배포: 서버 돌리는 거임 ㅋ

local에서 돌리는 것도 배포라고 할 수도 있지만 할 수 없음 ㅋ
보통 배포파일(jar) 만들어서 배포함
도커이용 도커는 신이야
서버 여러개 만들어도 도커 이미지만 갈아 끼우면 빠르고 편함

도커 전체 관리하는거 쿠버네티스(msa)

bean, 싱글톤패턴

자원낭비 방지, 하나만 쓰게 함

동시성문제: 메서드에서는 문제 x, 필드에서는 수정못하게(final)해서 주의해서 사용

component(bean으로 만들거다), bean(인스턴스) 똑같음

bean은 컴포넌트 스캔 방식, 스프링 빈 직접 등록

커밋 규칙

domain driven design 도메인 주도 설계

---

jwt는 엄준식

application.yml에서 secret key, issuer 등 관리, @ConfigurationProperties("jwt")로 매

ㄴ 깃허브 올릴때 yml빼고 올려서 보안 베리굿 하려고 그러는거인가?

